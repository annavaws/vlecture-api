stages:
  - test
  - build
  - publish
  - deploy
variables:
  DOCKER_IMAGE: $CI_REGISTRY_USER/$IMAGE_NAME
  DOCKER_TAG: $IMAGE_TAG
  DOCKER_HOST: "tcp://docker:2375"

# Test project
test:
  stage: test
  image: python:3.10-slim
  script:
    - echo "TESTING FASTAPI PROJECT...."

    - pip install -U pip
    - pip install -r requirements.txt
    - pytest
  only: 
    - main

# Build Docker image
build:
  stage: build
  image: docker:20-dind
  services:
    - docker
  variables:
    DOCKER_HOST: tcp://docker:2375 
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:20-dind
      alias: docker
      command: ["--tls=false"]
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - ls
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG .

    # Publish the new project Image to dockerhub 
    - docker push $DOCKER_IMAGE:$DOCKER_TAG

deploy:
  stage: deploy
  dependencies:
    - build
  image: ubuntu:22.04
  before_script:
    # https://docs.gitlab.com/ee/ci/ssh_keys/#ssh-keys-when-using-the-docker-executor
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'

    # https://www.fosstechnix.com/gitlab-ci-deploy-to-ec2-using-ssh/
    - eval $(ssh-agent -s)
    - echo "$AWS_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh 
    - chmod 700 ~/.ssh

    # Check contents of ssh folder
    - ls ~/.ssh

    # - ssh-keyscan -f $AWS_PUBLIC_DNS >> ~/.ssh/known_hosts
    - ssh-keyscan $AWS_EC2_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Check known_hosts
    - ls ~/.ssh/known_hosts


    # # Store key in file
    # - echo "$AWS_SSH_KEY" > "key.pem"

    # # Owner read access only
    # - chmod 400 key.pem 
  
  script:
    # - ls -ll

    # - ssh -o StrictHostKeyChecking=no -i $HOME/.ssh/key.pem $AWS_USERNAME@$AWS_PUBLIC_DNS "docker container rm -f $SERVER_CONTAINER_NAME || true"
    # - ssh -o StrictHostKeyChecking=no -i $HOME/.ssh/key.pem $AWS_USERNAME@$AWS_PUBLIC_DNS "docker image rm -f $DOCKER_IMAGE:$DOCKER_TAG || true"
    # - ssh -o StrictHostKeyChecking=no -i $HOME/.ssh/key.pem $AWS_USERNAME@$AWS_PUBLIC_DNS "docker run --name $SERVER_CONTAINER_NAME -d -p 80:8080 $DOCKER_IMAGE:$DOCKER_TAG"


    # # SSH into AWS EC2 instance using DNS ADDR
    # - ssh -o StrictHostKeyChecking=no -i "key.pem" ubuntu@ec2-54-68-107-42.us-west-2.compute.amazonaws.com "docker container rm -f $SERVER_CONTAINER_NAME || true && docker image rm -f $DOCKER_IMAGE:$DOCKER_TAG || true && docker run --name $SERVER_CONTAINER_NAME -d -p 80:8080 $DOCKER_IMAGE:$DOCKER_TAG"

    # SSH using VM IP Addr 
    - ssh -o StrictHostKeyChecking=no -i ubuntu@$AWS_EC2_IP "docker container rm -f $SERVER_CONTAINER_NAME || true && docker image rm -f $DOCKER_IMAGE:$DOCKER_TAG || true && docker run --name $SERVER_CONTAINER_NAME -d -p 80:8080 $DOCKER_IMAGE:$DOCKER_TAG"
  only:
    - main