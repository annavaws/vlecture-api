stages:
  - test
  - build
  - publish
  - deploy
variables:
  DOCKER_IMAGE: $CI_REGISTRY_USER/$IMAGE_NAME
  DOCKER_TAG: $IMAGE_TAG
  DOCKER_HOST: "tcp://docker:2375"

# Test project
test:
  stage: test
  image: python:3.10-slim
  script:
    - echo "TESTING FASTAPI PROJECT...."

    - pip install -U pip
    - pip install -r requirements.txt
    - pytest
  only: 
    - main

# Build Docker image
build:
  stage: build
  image: docker:20-dind
  services:
    - docker
  variables:
    DOCKER_HOST: tcp://docker:2375 
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:20-dind
      alias: docker
      command: ["--tls=false"]
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - ls
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG .

    # Publish the new project Image to dockerhub 
    - docker push $DOCKER_IMAGE:$DOCKER_TAG

deploy:
  stage: deploy
  dependencies:
    - build
  image: ubuntu:22.04
  before_script:
    # Installs on Ubuntu dist.
    - apt-get update && apt install -y openssh-client
    - eval $(ssh-agent -s)
    - echo "$AWS_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh 
    - chmod 700 ~/.ssh
  
  script:
    - ls -ll
    - ssh -o StrictHostKeyChecking=no $AWS_USERNAME@$AWS_PUBLIC_DNS "cd /home/vlecture; touch foo.txt; unzip public.zip"

    - ssh -o StrictHostKeyChecking=no $AWS_USERNAME@$AWS_PUBLIC_DNS "docker container rm -f $SERVER_CONTAINER_NAME || true"
    - ssh -o StrictHostKeyChecking=no $AWS_USERNAME@$AWS_PUBLIC_DNS "docker image rm -f $DOCKER_IMAGE:$DOCKER_TAG || true"
    - ssh -o StrictHostKeyChecking=no $AWS_USERNAME@$AWS_PUBLIC_DNS "docker run --name $SERVER_CONTAINER_NAME -d -p 80:8080 $DOCKER_IMAGE:$DOCKER_TAG"

    # # Store key in file
    # - echo "$AWS_SSH_KEY" > "key.pem"

    # # Owner read access only
    # - chmod 400 key.pem 


    # SSH into AWS EC2 instance
    # - ssh -i "key.pem" $AWS_USERNAME@$AWS_PUBLIC_DNS "
    #   docker container rm -f $SERVER_CONTAINER_NAME || true && 
    #   docker image rm -f $DOCKER_IMAGE:$DOCKER_TAG || true &&
    #   docker run --name $SERVER_CONTAINER_NAME -d -p 80:8080 $DOCKER_IMAGE:$DOCKER_TAG"
  only:
    - main